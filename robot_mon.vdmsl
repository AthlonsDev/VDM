types
     Move = <LEFT>| <RIGHT>| <UP>| <DOWN>;

values
     MAX : int = 6;
     MIN : int = 1;
     currentRow : int = 1;
     currentCol : int = 1;
    --  currentMove : [Move] = nil;

state RobotMonitor of
    col : int
    row : int
    move : [Move]
inv mk_RobotMonitor(c, r, m) ==
    (((r >= MIN and r <= MAX or (c >= MIN and c <= MAX) and m = <LEFT>)
            or m = <RIGHT>)
        or m = <UP>)
    or m = <DOWN>
init RM == RM = mk_RobotMonitor(1, 1, nil)
end

operations
    MoveRight()
    ext wr col:int
wr move:[Move]
    pre (move <> <RIGHT> and col > MIN) and col < MAX
    post currentCol = col~ + col and move = <RIGHT>;
    
    MoveLeft()
    ext wr col:int
	wr move:[Move]
    pre move <> <LEFT> and col > MIN
    and col < MAX
    post currentCol = col~ - col and move = <LEFT>;
    
    MoveDown()
    ext wr row:int
	wr move:[Move]
    pre (move <> <DOWN> and row > MIN) and row < MAX
    post currentRow = row~ + row and move = <DOWN>;
    
    MoveUp()
    ext wr row:int
	wr move:[Move]
    pre move <> <UP> and row > MIN and row < MAX
    post currentRow = row~ - row and move = <UP>;
    
    GetRow()
    ext rd row:int
    pre true
    post currentRow = row;
    
    GetCol()
    ext rd col:int
    pre true
    post currentCol = col;
    
    GetMove()
    ext rd move:[Move]
    pre true
    post move = move;
