types
     Move = <LEFT>| <RIGHT>| <UP>| <DOWN>| <nil>;

values
     MAX : int = 6;
     MIN : int = 1;
     currentRow : int = 1;
     currentCol : int = 1;
     previousMove : Move = <nil>;
     currentMove : Move = <nil>;

state RobotMonitor of
    col : int
    row : int
    move : [Move]
inv mk_RobotMonitor(c, r, m) ==
    (((r >= MIN and r <= MAX or (c >= MIN and c <= MAX) and m = <LEFT>)
            or m = <RIGHT>)
        or m = <UP>)
    or m = <DOWN>
init RM == RM = mk_RobotMonitor(1, 1, <nil>)
end

operations
    MoveRight()
    ext wr col:int
    pre (previousMove <> <RIGHT> and col > MIN) and col < MAX
    post currentCol = col~ + col and currentMove = <RIGHT>;
    
    MoveLeft()
    ext wr col:int
    pre ((currentMove <> <LEFT> and previousMove <> <nil>) and col > MIN)
    and col < MAX
    post currentCol = col~ - col and currentMove = <LEFT>;
    
    MoveDown()
    ext wr row:int
    pre (currentMove <> <DOWN> and row > MIN) and row < MAX
    post currentRow = row~ + row and currentMove = <DOWN>;
    
    MoveUp()
    ext wr row:int
    pre currentMove <> <UP> or (previousMove <> <nil> and row > MIN) and row < MAX
    post currentRow = row~ - row and currentMove = <UP>;
    
    GetRow()
    ext rd row:int
    pre true
    post currentRow = row;
    
    GetCol()
    ext rd col:int
    pre true
    post currentCol = col;
    
    GetMove()
    pre true
    post previousMove = currentMove;